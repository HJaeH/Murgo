// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mumble/mumble.proto

/*
Package mumble is a generated protocol buffer package.

It is generated from these files:
	mumble/mumble.proto

It has these top-level messages:
	Version
	UDPTunnel
	Authenticate
	Ping
	Reject
	ServerConfig
	ServerSync
	ChannelRemove
	ChannelState
	UserRemove
	UserState
	BanList
	TextMessage
	PermissionDenied
	ACL
	QueryUsers
	CryptSetup
	ContextActionModify
	ContextAction
	UserList
	VoiceTarget
	PermissionQuery
	CodecVersion
	UserStats
	SuggestConfig
	RequestBlob
*/
package mumbleproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Reject_RejectType int32

const (
	Reject_None              Reject_RejectType = 0
	Reject_WrongVersion      Reject_RejectType = 1
	Reject_InvalidUsername   Reject_RejectType = 2
	Reject_WrongUserPW       Reject_RejectType = 3
	Reject_WrongServerPW     Reject_RejectType = 4
	Reject_UsernameInUse     Reject_RejectType = 5
	Reject_ServerFull        Reject_RejectType = 6
	Reject_NoCertificate     Reject_RejectType = 7
	Reject_AuthenticatorFail Reject_RejectType = 8
	Reject_ChannelNone       Reject_RejectType = 9
)

var Reject_RejectType_name = map[int32]string{
	0: "None",
	1: "WrongVersion",
	2: "InvalidUsername",
	3: "WrongUserPW",
	4: "WrongServerPW",
	5: "UsernameInUse",
	6: "ServerFull",
	7: "NoCertificate",
	8: "AuthenticatorFail",
	9: "ChannelNone",
}
var Reject_RejectType_value = map[string]int32{
	"None":              0,
	"WrongVersion":      1,
	"InvalidUsername":   2,
	"WrongUserPW":       3,
	"WrongServerPW":     4,
	"UsernameInUse":     5,
	"ServerFull":        6,
	"NoCertificate":     7,
	"AuthenticatorFail": 8,
	"ChannelNone":       9,
}

func (x Reject_RejectType) Enum() *Reject_RejectType {
	p := new(Reject_RejectType)
	*p = x
	return p
}
func (x Reject_RejectType) String() string {
	return proto.EnumName(Reject_RejectType_name, int32(x))
}
func (x *Reject_RejectType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Reject_RejectType_value, data, "Reject_RejectType")
	if err != nil {
		return err
	}
	*x = Reject_RejectType(value)
	return nil
}
func (Reject_RejectType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4, 0} }

type PermissionDenied_DenyType int32

const (
	PermissionDenied_Text               PermissionDenied_DenyType = 0
	PermissionDenied_Permission         PermissionDenied_DenyType = 1
	PermissionDenied_SuperUser          PermissionDenied_DenyType = 2
	PermissionDenied_ChannelName        PermissionDenied_DenyType = 3
	PermissionDenied_TextTooLong        PermissionDenied_DenyType = 4
	PermissionDenied_H9K                PermissionDenied_DenyType = 5
	PermissionDenied_TemporaryChannel   PermissionDenied_DenyType = 6
	PermissionDenied_MissingCertificate PermissionDenied_DenyType = 7
	PermissionDenied_UserName           PermissionDenied_DenyType = 8
	PermissionDenied_ChannelFull        PermissionDenied_DenyType = 9
	PermissionDenied_NestingLimit       PermissionDenied_DenyType = 10
	PermissionDenied_SpeakerFull        PermissionDenied_DenyType = 11
)

var PermissionDenied_DenyType_name = map[int32]string{
	0:  "Text",
	1:  "Permission",
	2:  "SuperUser",
	3:  "ChannelName",
	4:  "TextTooLong",
	5:  "H9K",
	6:  "TemporaryChannel",
	7:  "MissingCertificate",
	8:  "UserName",
	9:  "ChannelFull",
	10: "NestingLimit",
	11: "SpeakerFull",
}
var PermissionDenied_DenyType_value = map[string]int32{
	"Text":               0,
	"Permission":         1,
	"SuperUser":          2,
	"ChannelName":        3,
	"TextTooLong":        4,
	"H9K":                5,
	"TemporaryChannel":   6,
	"MissingCertificate": 7,
	"UserName":           8,
	"ChannelFull":        9,
	"NestingLimit":       10,
	"SpeakerFull":        11,
}

func (x PermissionDenied_DenyType) Enum() *PermissionDenied_DenyType {
	p := new(PermissionDenied_DenyType)
	*p = x
	return p
}
func (x PermissionDenied_DenyType) String() string {
	return proto.EnumName(PermissionDenied_DenyType_name, int32(x))
}
func (x *PermissionDenied_DenyType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PermissionDenied_DenyType_value, data, "PermissionDenied_DenyType")
	if err != nil {
		return err
	}
	*x = PermissionDenied_DenyType(value)
	return nil
}
func (PermissionDenied_DenyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{13, 0}
}

type ContextActionModify_Context int32

const (
	ContextActionModify_Server  ContextActionModify_Context = 1
	ContextActionModify_Channel ContextActionModify_Context = 2
	ContextActionModify_User    ContextActionModify_Context = 4
)

var ContextActionModify_Context_name = map[int32]string{
	1: "Server",
	2: "Channel",
	4: "User",
}
var ContextActionModify_Context_value = map[string]int32{
	"Server":  1,
	"Channel": 2,
	"User":    4,
}

func (x ContextActionModify_Context) Enum() *ContextActionModify_Context {
	p := new(ContextActionModify_Context)
	*p = x
	return p
}
func (x ContextActionModify_Context) String() string {
	return proto.EnumName(ContextActionModify_Context_name, int32(x))
}
func (x *ContextActionModify_Context) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ContextActionModify_Context_value, data, "ContextActionModify_Context")
	if err != nil {
		return err
	}
	*x = ContextActionModify_Context(value)
	return nil
}
func (ContextActionModify_Context) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{17, 0}
}

type ContextActionModify_Operation int32

const (
	ContextActionModify_Add    ContextActionModify_Operation = 0
	ContextActionModify_Remove ContextActionModify_Operation = 1
)

var ContextActionModify_Operation_name = map[int32]string{
	0: "Add",
	1: "Remove",
}
var ContextActionModify_Operation_value = map[string]int32{
	"Add":    0,
	"Remove": 1,
}

func (x ContextActionModify_Operation) Enum() *ContextActionModify_Operation {
	p := new(ContextActionModify_Operation)
	*p = x
	return p
}
func (x ContextActionModify_Operation) String() string {
	return proto.EnumName(ContextActionModify_Operation_name, int32(x))
}
func (x *ContextActionModify_Operation) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ContextActionModify_Operation_value, data, "ContextActionModify_Operation")
	if err != nil {
		return err
	}
	*x = ContextActionModify_Operation(value)
	return nil
}
func (ContextActionModify_Operation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{17, 1}
}

type Version struct {
	Version          *uint32  `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Release          *string  `protobuf:"bytes,2,opt,name=release" json:"release,omitempty"`
	Os               *string  `protobuf:"bytes,3,opt,name=os" json:"os,omitempty"`
	OsVersion        *string  `protobuf:"bytes,4,opt,name=os_version,json=osVersion" json:"os_version,omitempty"`
	CryptoModes      []string `protobuf:"bytes,5,rep,name=crypto_modes,json=cryptoModes" json:"crypto_modes,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Version) Reset()                    { *m = Version{} }
func (m *Version) String() string            { return proto.CompactTextString(m) }
func (*Version) ProtoMessage()               {}
func (*Version) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Version) GetVersion() uint32 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return 0
}

func (m *Version) GetRelease() string {
	if m != nil && m.Release != nil {
		return *m.Release
	}
	return ""
}

func (m *Version) GetOs() string {
	if m != nil && m.Os != nil {
		return *m.Os
	}
	return ""
}

func (m *Version) GetOsVersion() string {
	if m != nil && m.OsVersion != nil {
		return *m.OsVersion
	}
	return ""
}

func (m *Version) GetCryptoModes() []string {
	if m != nil {
		return m.CryptoModes
	}
	return nil
}

type UDPTunnel struct {
	Packet           []byte `protobuf:"bytes,1,req,name=packet" json:"packet,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *UDPTunnel) Reset()                    { *m = UDPTunnel{} }
func (m *UDPTunnel) String() string            { return proto.CompactTextString(m) }
func (*UDPTunnel) ProtoMessage()               {}
func (*UDPTunnel) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *UDPTunnel) GetPacket() []byte {
	if m != nil {
		return m.Packet
	}
	return nil
}

type Authenticate struct {
	Username         *string  `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Password         *string  `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	Tokens           []string `protobuf:"bytes,3,rep,name=tokens" json:"tokens,omitempty"`
	CeltVersions     []int32  `protobuf:"varint,4,rep,name=celt_versions,json=celtVersions" json:"celt_versions,omitempty"`
	Opus             *bool    `protobuf:"varint,5,opt,name=opus,def=0" json:"opus,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Authenticate) Reset()                    { *m = Authenticate{} }
func (m *Authenticate) String() string            { return proto.CompactTextString(m) }
func (*Authenticate) ProtoMessage()               {}
func (*Authenticate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

const Default_Authenticate_Opus bool = false

func (m *Authenticate) GetUsername() string {
	if m != nil && m.Username != nil {
		return *m.Username
	}
	return ""
}

func (m *Authenticate) GetPassword() string {
	if m != nil && m.Password != nil {
		return *m.Password
	}
	return ""
}

func (m *Authenticate) GetTokens() []string {
	if m != nil {
		return m.Tokens
	}
	return nil
}

func (m *Authenticate) GetCeltVersions() []int32 {
	if m != nil {
		return m.CeltVersions
	}
	return nil
}

func (m *Authenticate) GetOpus() bool {
	if m != nil && m.Opus != nil {
		return *m.Opus
	}
	return Default_Authenticate_Opus
}

type Ping struct {
	Timestamp        *uint64  `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Good             *uint32  `protobuf:"varint,2,opt,name=good" json:"good,omitempty"`
	Late             *uint32  `protobuf:"varint,3,opt,name=late" json:"late,omitempty"`
	Lost             *uint32  `protobuf:"varint,4,opt,name=lost" json:"lost,omitempty"`
	Resync           *uint32  `protobuf:"varint,5,opt,name=resync" json:"resync,omitempty"`
	UdpPackets       *uint32  `protobuf:"varint,6,opt,name=udp_packets,json=udpPackets" json:"udp_packets,omitempty"`
	TcpPackets       *uint32  `protobuf:"varint,7,opt,name=tcp_packets,json=tcpPackets" json:"tcp_packets,omitempty"`
	UdpPingAvg       *float32 `protobuf:"fixed32,8,opt,name=udp_ping_avg,json=udpPingAvg" json:"udp_ping_avg,omitempty"`
	UdpPingVar       *float32 `protobuf:"fixed32,9,opt,name=udp_ping_var,json=udpPingVar" json:"udp_ping_var,omitempty"`
	TcpPingAvg       *float32 `protobuf:"fixed32,10,opt,name=tcp_ping_avg,json=tcpPingAvg" json:"tcp_ping_avg,omitempty"`
	TcpPingVar       *float32 `protobuf:"fixed32,11,opt,name=tcp_ping_var,json=tcpPingVar" json:"tcp_ping_var,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Ping) Reset()                    { *m = Ping{} }
func (m *Ping) String() string            { return proto.CompactTextString(m) }
func (*Ping) ProtoMessage()               {}
func (*Ping) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Ping) GetTimestamp() uint64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *Ping) GetGood() uint32 {
	if m != nil && m.Good != nil {
		return *m.Good
	}
	return 0
}

func (m *Ping) GetLate() uint32 {
	if m != nil && m.Late != nil {
		return *m.Late
	}
	return 0
}

func (m *Ping) GetLost() uint32 {
	if m != nil && m.Lost != nil {
		return *m.Lost
	}
	return 0
}

func (m *Ping) GetResync() uint32 {
	if m != nil && m.Resync != nil {
		return *m.Resync
	}
	return 0
}

func (m *Ping) GetUdpPackets() uint32 {
	if m != nil && m.UdpPackets != nil {
		return *m.UdpPackets
	}
	return 0
}

func (m *Ping) GetTcpPackets() uint32 {
	if m != nil && m.TcpPackets != nil {
		return *m.TcpPackets
	}
	return 0
}

func (m *Ping) GetUdpPingAvg() float32 {
	if m != nil && m.UdpPingAvg != nil {
		return *m.UdpPingAvg
	}
	return 0
}

func (m *Ping) GetUdpPingVar() float32 {
	if m != nil && m.UdpPingVar != nil {
		return *m.UdpPingVar
	}
	return 0
}

func (m *Ping) GetTcpPingAvg() float32 {
	if m != nil && m.TcpPingAvg != nil {
		return *m.TcpPingAvg
	}
	return 0
}

func (m *Ping) GetTcpPingVar() float32 {
	if m != nil && m.TcpPingVar != nil {
		return *m.TcpPingVar
	}
	return 0
}

type Reject struct {
	Type             *Reject_RejectType `protobuf:"varint,1,opt,name=type,enum=mumble.Reject_RejectType" json:"type,omitempty"`
	Reason           *string            `protobuf:"bytes,2,opt,name=reason" json:"reason,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *Reject) Reset()                    { *m = Reject{} }
func (m *Reject) String() string            { return proto.CompactTextString(m) }
func (*Reject) ProtoMessage()               {}
func (*Reject) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Reject) GetType() Reject_RejectType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Reject_None
}

func (m *Reject) GetReason() string {
	if m != nil && m.Reason != nil {
		return *m.Reason
	}
	return ""
}

type ServerConfig struct {
	MaxBandwidth       *uint32 `protobuf:"varint,1,opt,name=max_bandwidth,json=maxBandwidth" json:"max_bandwidth,omitempty"`
	WelcomeText        *string `protobuf:"bytes,2,opt,name=welcome_text,json=welcomeText" json:"welcome_text,omitempty"`
	AllowHtml          *bool   `protobuf:"varint,3,opt,name=allow_html,json=allowHtml" json:"allow_html,omitempty"`
	MessageLength      *uint32 `protobuf:"varint,4,opt,name=message_length,json=messageLength" json:"message_length,omitempty"`
	ImageMessageLength *uint32 `protobuf:"varint,5,opt,name=image_message_length,json=imageMessageLength" json:"image_message_length,omitempty"`
	XXX_unrecognized   []byte  `json:"-"`
}

func (m *ServerConfig) Reset()                    { *m = ServerConfig{} }
func (m *ServerConfig) String() string            { return proto.CompactTextString(m) }
func (*ServerConfig) ProtoMessage()               {}
func (*ServerConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ServerConfig) GetMaxBandwidth() uint32 {
	if m != nil && m.MaxBandwidth != nil {
		return *m.MaxBandwidth
	}
	return 0
}

func (m *ServerConfig) GetWelcomeText() string {
	if m != nil && m.WelcomeText != nil {
		return *m.WelcomeText
	}
	return ""
}

func (m *ServerConfig) GetAllowHtml() bool {
	if m != nil && m.AllowHtml != nil {
		return *m.AllowHtml
	}
	return false
}

func (m *ServerConfig) GetMessageLength() uint32 {
	if m != nil && m.MessageLength != nil {
		return *m.MessageLength
	}
	return 0
}

func (m *ServerConfig) GetImageMessageLength() uint32 {
	if m != nil && m.ImageMessageLength != nil {
		return *m.ImageMessageLength
	}
	return 0
}

type ServerSync struct {
	Session          *uint32 `protobuf:"varint,1,opt,name=session" json:"session,omitempty"`
	MaxBandwidth     *uint32 `protobuf:"varint,2,opt,name=max_bandwidth,json=maxBandwidth" json:"max_bandwidth,omitempty"`
	WelcomeText      *string `protobuf:"bytes,3,opt,name=welcome_text,json=welcomeText" json:"welcome_text,omitempty"`
	Permissions      *uint64 `protobuf:"varint,4,opt,name=permissions" json:"permissions,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ServerSync) Reset()                    { *m = ServerSync{} }
func (m *ServerSync) String() string            { return proto.CompactTextString(m) }
func (*ServerSync) ProtoMessage()               {}
func (*ServerSync) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ServerSync) GetSession() uint32 {
	if m != nil && m.Session != nil {
		return *m.Session
	}
	return 0
}

func (m *ServerSync) GetMaxBandwidth() uint32 {
	if m != nil && m.MaxBandwidth != nil {
		return *m.MaxBandwidth
	}
	return 0
}

func (m *ServerSync) GetWelcomeText() string {
	if m != nil && m.WelcomeText != nil {
		return *m.WelcomeText
	}
	return ""
}

func (m *ServerSync) GetPermissions() uint64 {
	if m != nil && m.Permissions != nil {
		return *m.Permissions
	}
	return 0
}

type ChannelRemove struct {
	ChannelId        *uint32 `protobuf:"varint,1,req,name=channel_id,json=channelId" json:"channel_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ChannelRemove) Reset()                    { *m = ChannelRemove{} }
func (m *ChannelRemove) String() string            { return proto.CompactTextString(m) }
func (*ChannelRemove) ProtoMessage()               {}
func (*ChannelRemove) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ChannelRemove) GetChannelId() uint32 {
	if m != nil && m.ChannelId != nil {
		return *m.ChannelId
	}
	return 0
}

type ChannelState struct {
	ChannelId        *uint32  `protobuf:"varint,1,opt,name=channel_id,json=channelId" json:"channel_id,omitempty"`
	Parent           *uint32  `protobuf:"varint,2,opt,name=parent" json:"parent,omitempty"`
	Name             *string  `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Links            []uint32 `protobuf:"varint,4,rep,name=links" json:"links,omitempty"`
	Description      *string  `protobuf:"bytes,5,opt,name=description" json:"description,omitempty"`
	LinksAdd         []uint32 `protobuf:"varint,6,rep,name=links_add,json=linksAdd" json:"links_add,omitempty"`
	LinksRemove      []uint32 `protobuf:"varint,7,rep,name=links_remove,json=linksRemove" json:"links_remove,omitempty"`
	Temporary        *bool    `protobuf:"varint,8,opt,name=temporary,def=0" json:"temporary,omitempty"`
	Position         *int32   `protobuf:"varint,9,opt,name=position,def=0" json:"position,omitempty"`
	DescriptionHash  []byte   `protobuf:"bytes,10,opt,name=description_hash,json=descriptionHash" json:"description_hash,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *ChannelState) Reset()                    { *m = ChannelState{} }
func (m *ChannelState) String() string            { return proto.CompactTextString(m) }
func (*ChannelState) ProtoMessage()               {}
func (*ChannelState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

const Default_ChannelState_Temporary bool = false
const Default_ChannelState_Position int32 = 0

func (m *ChannelState) GetChannelId() uint32 {
	if m != nil && m.ChannelId != nil {
		return *m.ChannelId
	}
	return 0
}

func (m *ChannelState) GetParent() uint32 {
	if m != nil && m.Parent != nil {
		return *m.Parent
	}
	return 0
}

func (m *ChannelState) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *ChannelState) GetLinks() []uint32 {
	if m != nil {
		return m.Links
	}
	return nil
}

func (m *ChannelState) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *ChannelState) GetLinksAdd() []uint32 {
	if m != nil {
		return m.LinksAdd
	}
	return nil
}

func (m *ChannelState) GetLinksRemove() []uint32 {
	if m != nil {
		return m.LinksRemove
	}
	return nil
}

func (m *ChannelState) GetTemporary() bool {
	if m != nil && m.Temporary != nil {
		return *m.Temporary
	}
	return Default_ChannelState_Temporary
}

func (m *ChannelState) GetPosition() int32 {
	if m != nil && m.Position != nil {
		return *m.Position
	}
	return Default_ChannelState_Position
}

func (m *ChannelState) GetDescriptionHash() []byte {
	if m != nil {
		return m.DescriptionHash
	}
	return nil
}

type UserRemove struct {
	Session          *uint32 `protobuf:"varint,1,req,name=session" json:"session,omitempty"`
	Actor            *uint32 `protobuf:"varint,2,opt,name=actor" json:"actor,omitempty"`
	Reason           *string `protobuf:"bytes,3,opt,name=reason" json:"reason,omitempty"`
	Ban              *bool   `protobuf:"varint,4,opt,name=ban" json:"ban,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *UserRemove) Reset()                    { *m = UserRemove{} }
func (m *UserRemove) String() string            { return proto.CompactTextString(m) }
func (*UserRemove) ProtoMessage()               {}
func (*UserRemove) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *UserRemove) GetSession() uint32 {
	if m != nil && m.Session != nil {
		return *m.Session
	}
	return 0
}

func (m *UserRemove) GetActor() uint32 {
	if m != nil && m.Actor != nil {
		return *m.Actor
	}
	return 0
}

func (m *UserRemove) GetReason() string {
	if m != nil && m.Reason != nil {
		return *m.Reason
	}
	return ""
}

func (m *UserRemove) GetBan() bool {
	if m != nil && m.Ban != nil {
		return *m.Ban
	}
	return false
}

type UserState struct {
	Session            *uint32 `protobuf:"varint,1,opt,name=session" json:"session,omitempty"`
	Actor              *uint32 `protobuf:"varint,2,opt,name=actor" json:"actor,omitempty"`
	Name               *string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	UserId             *uint32 `protobuf:"varint,4,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	ChannelId          *uint32 `protobuf:"varint,5,opt,name=channel_id,json=channelId" json:"channel_id,omitempty"`
	Mute               *bool   `protobuf:"varint,6,opt,name=mute" json:"mute,omitempty"`
	Deaf               *bool   `protobuf:"varint,7,opt,name=deaf" json:"deaf,omitempty"`
	Suppress           *bool   `protobuf:"varint,8,opt,name=suppress" json:"suppress,omitempty"`
	SelfMute           *bool   `protobuf:"varint,9,opt,name=self_mute,json=selfMute" json:"self_mute,omitempty"`
	SelfDeaf           *bool   `protobuf:"varint,10,opt,name=self_deaf,json=selfDeaf" json:"self_deaf,omitempty"`
	Texture            []byte  `protobuf:"bytes,11,opt,name=texture" json:"texture,omitempty"`
	PluginContext      []byte  `protobuf:"bytes,12,opt,name=plugin_context,json=pluginContext" json:"plugin_context,omitempty"`
	PluginIdentity     *string `protobuf:"bytes,13,opt,name=plugin_identity,json=pluginIdentity" json:"plugin_identity,omitempty"`
	Comment            *string `protobuf:"bytes,14,opt,name=comment" json:"comment,omitempty"`
	Hash               *string `protobuf:"bytes,15,opt,name=hash" json:"hash,omitempty"`
	CommentHash        []byte  `protobuf:"bytes,16,opt,name=comment_hash,json=commentHash" json:"comment_hash,omitempty"`
	TextureHash        []byte  `protobuf:"bytes,17,opt,name=texture_hash,json=textureHash" json:"texture_hash,omitempty"`
	PrioritySpeaker    *bool   `protobuf:"varint,18,opt,name=priority_speaker,json=prioritySpeaker" json:"priority_speaker,omitempty"`
	Recording          *bool   `protobuf:"varint,19,opt,name=recording" json:"recording,omitempty"`
	ChannelOwner       *bool   `protobuf:"varint,20,opt,name=channel_owner,json=channelOwner" json:"channel_owner,omitempty"`
	ExistUsableMic     *bool   `protobuf:"varint,21,opt,name=exist_usable_mic,json=existUsableMic" json:"exist_usable_mic,omitempty"`
	ExistUsableSpeaker *bool   `protobuf:"varint,22,opt,name=exist_usable_speaker,json=existUsableSpeaker" json:"exist_usable_speaker,omitempty"`
	XXX_unrecognized   []byte  `json:"-"`
}

func (m *UserState) Reset()                    { *m = UserState{} }
func (m *UserState) String() string            { return proto.CompactTextString(m) }
func (*UserState) ProtoMessage()               {}
func (*UserState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *UserState) GetSession() uint32 {
	if m != nil && m.Session != nil {
		return *m.Session
	}
	return 0
}

func (m *UserState) GetActor() uint32 {
	if m != nil && m.Actor != nil {
		return *m.Actor
	}
	return 0
}

func (m *UserState) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *UserState) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *UserState) GetChannelId() uint32 {
	if m != nil && m.ChannelId != nil {
		return *m.ChannelId
	}
	return 0
}

func (m *UserState) GetMute() bool {
	if m != nil && m.Mute != nil {
		return *m.Mute
	}
	return false
}

func (m *UserState) GetDeaf() bool {
	if m != nil && m.Deaf != nil {
		return *m.Deaf
	}
	return false
}

func (m *UserState) GetSuppress() bool {
	if m != nil && m.Suppress != nil {
		return *m.Suppress
	}
	return false
}

func (m *UserState) GetSelfMute() bool {
	if m != nil && m.SelfMute != nil {
		return *m.SelfMute
	}
	return false
}

func (m *UserState) GetSelfDeaf() bool {
	if m != nil && m.SelfDeaf != nil {
		return *m.SelfDeaf
	}
	return false
}

func (m *UserState) GetTexture() []byte {
	if m != nil {
		return m.Texture
	}
	return nil
}

func (m *UserState) GetPluginContext() []byte {
	if m != nil {
		return m.PluginContext
	}
	return nil
}

func (m *UserState) GetPluginIdentity() string {
	if m != nil && m.PluginIdentity != nil {
		return *m.PluginIdentity
	}
	return ""
}

func (m *UserState) GetComment() string {
	if m != nil && m.Comment != nil {
		return *m.Comment
	}
	return ""
}

func (m *UserState) GetHash() string {
	if m != nil && m.Hash != nil {
		return *m.Hash
	}
	return ""
}

func (m *UserState) GetCommentHash() []byte {
	if m != nil {
		return m.CommentHash
	}
	return nil
}

func (m *UserState) GetTextureHash() []byte {
	if m != nil {
		return m.TextureHash
	}
	return nil
}

func (m *UserState) GetPrioritySpeaker() bool {
	if m != nil && m.PrioritySpeaker != nil {
		return *m.PrioritySpeaker
	}
	return false
}

func (m *UserState) GetRecording() bool {
	if m != nil && m.Recording != nil {
		return *m.Recording
	}
	return false
}

func (m *UserState) GetChannelOwner() bool {
	if m != nil && m.ChannelOwner != nil {
		return *m.ChannelOwner
	}
	return false
}

func (m *UserState) GetExistUsableMic() bool {
	if m != nil && m.ExistUsableMic != nil {
		return *m.ExistUsableMic
	}
	return false
}

func (m *UserState) GetExistUsableSpeaker() bool {
	if m != nil && m.ExistUsableSpeaker != nil {
		return *m.ExistUsableSpeaker
	}
	return false
}

type BanList struct {
	Bans             []*BanList_BanEntry `protobuf:"bytes,1,rep,name=bans" json:"bans,omitempty"`
	Query            *bool               `protobuf:"varint,2,opt,name=query,def=0" json:"query,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *BanList) Reset()                    { *m = BanList{} }
func (m *BanList) String() string            { return proto.CompactTextString(m) }
func (*BanList) ProtoMessage()               {}
func (*BanList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

const Default_BanList_Query bool = false

func (m *BanList) GetBans() []*BanList_BanEntry {
	if m != nil {
		return m.Bans
	}
	return nil
}

func (m *BanList) GetQuery() bool {
	if m != nil && m.Query != nil {
		return *m.Query
	}
	return Default_BanList_Query
}

type BanList_BanEntry struct {
	Address          []byte  `protobuf:"bytes,1,req,name=address" json:"address,omitempty"`
	Mask             *uint32 `protobuf:"varint,2,req,name=mask" json:"mask,omitempty"`
	Name             *string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Hash             *string `protobuf:"bytes,4,opt,name=hash" json:"hash,omitempty"`
	Reason           *string `protobuf:"bytes,5,opt,name=reason" json:"reason,omitempty"`
	Start            *string `protobuf:"bytes,6,opt,name=start" json:"start,omitempty"`
	Duration         *uint32 `protobuf:"varint,7,opt,name=duration" json:"duration,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *BanList_BanEntry) Reset()                    { *m = BanList_BanEntry{} }
func (m *BanList_BanEntry) String() string            { return proto.CompactTextString(m) }
func (*BanList_BanEntry) ProtoMessage()               {}
func (*BanList_BanEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11, 0} }

func (m *BanList_BanEntry) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *BanList_BanEntry) GetMask() uint32 {
	if m != nil && m.Mask != nil {
		return *m.Mask
	}
	return 0
}

func (m *BanList_BanEntry) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *BanList_BanEntry) GetHash() string {
	if m != nil && m.Hash != nil {
		return *m.Hash
	}
	return ""
}

func (m *BanList_BanEntry) GetReason() string {
	if m != nil && m.Reason != nil {
		return *m.Reason
	}
	return ""
}

func (m *BanList_BanEntry) GetStart() string {
	if m != nil && m.Start != nil {
		return *m.Start
	}
	return ""
}

func (m *BanList_BanEntry) GetDuration() uint32 {
	if m != nil && m.Duration != nil {
		return *m.Duration
	}
	return 0
}

type TextMessage struct {
	Actor            *uint32  `protobuf:"varint,1,opt,name=actor" json:"actor,omitempty"`
	Session          []uint32 `protobuf:"varint,2,rep,name=session" json:"session,omitempty"`
	ChannelId        []uint32 `protobuf:"varint,3,rep,name=channel_id,json=channelId" json:"channel_id,omitempty"`
	TreeId           []uint32 `protobuf:"varint,4,rep,name=tree_id,json=treeId" json:"tree_id,omitempty"`
	Message          *string  `protobuf:"bytes,5,req,name=message" json:"message,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *TextMessage) Reset()                    { *m = TextMessage{} }
func (m *TextMessage) String() string            { return proto.CompactTextString(m) }
func (*TextMessage) ProtoMessage()               {}
func (*TextMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *TextMessage) GetActor() uint32 {
	if m != nil && m.Actor != nil {
		return *m.Actor
	}
	return 0
}

func (m *TextMessage) GetSession() []uint32 {
	if m != nil {
		return m.Session
	}
	return nil
}

func (m *TextMessage) GetChannelId() []uint32 {
	if m != nil {
		return m.ChannelId
	}
	return nil
}

func (m *TextMessage) GetTreeId() []uint32 {
	if m != nil {
		return m.TreeId
	}
	return nil
}

func (m *TextMessage) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

type PermissionDenied struct {
	Permission       *uint32                    `protobuf:"varint,1,opt,name=permission" json:"permission,omitempty"`
	ChannelId        *uint32                    `protobuf:"varint,2,opt,name=channel_id,json=channelId" json:"channel_id,omitempty"`
	Session          *uint32                    `protobuf:"varint,3,opt,name=session" json:"session,omitempty"`
	Reason           *string                    `protobuf:"bytes,4,opt,name=reason" json:"reason,omitempty"`
	Type             *PermissionDenied_DenyType `protobuf:"varint,5,opt,name=type,enum=mumble.PermissionDenied_DenyType" json:"type,omitempty"`
	Name             *string                    `protobuf:"bytes,6,opt,name=name" json:"name,omitempty"`
	XXX_unrecognized []byte                     `json:"-"`
}

func (m *PermissionDenied) Reset()                    { *m = PermissionDenied{} }
func (m *PermissionDenied) String() string            { return proto.CompactTextString(m) }
func (*PermissionDenied) ProtoMessage()               {}
func (*PermissionDenied) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *PermissionDenied) GetPermission() uint32 {
	if m != nil && m.Permission != nil {
		return *m.Permission
	}
	return 0
}

func (m *PermissionDenied) GetChannelId() uint32 {
	if m != nil && m.ChannelId != nil {
		return *m.ChannelId
	}
	return 0
}

func (m *PermissionDenied) GetSession() uint32 {
	if m != nil && m.Session != nil {
		return *m.Session
	}
	return 0
}

func (m *PermissionDenied) GetReason() string {
	if m != nil && m.Reason != nil {
		return *m.Reason
	}
	return ""
}

func (m *PermissionDenied) GetType() PermissionDenied_DenyType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return PermissionDenied_Text
}

func (m *PermissionDenied) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

type ACL struct {
	ChannelId        *uint32          `protobuf:"varint,1,req,name=channel_id,json=channelId" json:"channel_id,omitempty"`
	InheritAcls      *bool            `protobuf:"varint,2,opt,name=inherit_acls,json=inheritAcls,def=1" json:"inherit_acls,omitempty"`
	Groups           []*ACL_ChanGroup `protobuf:"bytes,3,rep,name=groups" json:"groups,omitempty"`
	Acls             []*ACL_ChanACL   `protobuf:"bytes,4,rep,name=acls" json:"acls,omitempty"`
	Query            *bool            `protobuf:"varint,5,opt,name=query,def=0" json:"query,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *ACL) Reset()                    { *m = ACL{} }
func (m *ACL) String() string            { return proto.CompactTextString(m) }
func (*ACL) ProtoMessage()               {}
func (*ACL) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

const Default_ACL_InheritAcls bool = true
const Default_ACL_Query bool = false

func (m *ACL) GetChannelId() uint32 {
	if m != nil && m.ChannelId != nil {
		return *m.ChannelId
	}
	return 0
}

func (m *ACL) GetInheritAcls() bool {
	if m != nil && m.InheritAcls != nil {
		return *m.InheritAcls
	}
	return Default_ACL_InheritAcls
}

func (m *ACL) GetGroups() []*ACL_ChanGroup {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *ACL) GetAcls() []*ACL_ChanACL {
	if m != nil {
		return m.Acls
	}
	return nil
}

func (m *ACL) GetQuery() bool {
	if m != nil && m.Query != nil {
		return *m.Query
	}
	return Default_ACL_Query
}

type ACL_ChanGroup struct {
	Name             *string  `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Inherited        *bool    `protobuf:"varint,2,opt,name=inherited,def=1" json:"inherited,omitempty"`
	Inherit          *bool    `protobuf:"varint,3,opt,name=inherit,def=1" json:"inherit,omitempty"`
	Inheritable      *bool    `protobuf:"varint,4,opt,name=inheritable,def=1" json:"inheritable,omitempty"`
	Add              []uint32 `protobuf:"varint,5,rep,name=add" json:"add,omitempty"`
	Remove           []uint32 `protobuf:"varint,6,rep,name=remove" json:"remove,omitempty"`
	InheritedMembers []uint32 `protobuf:"varint,7,rep,name=inherited_members,json=inheritedMembers" json:"inherited_members,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *ACL_ChanGroup) Reset()                    { *m = ACL_ChanGroup{} }
func (m *ACL_ChanGroup) String() string            { return proto.CompactTextString(m) }
func (*ACL_ChanGroup) ProtoMessage()               {}
func (*ACL_ChanGroup) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14, 0} }

const Default_ACL_ChanGroup_Inherited bool = true
const Default_ACL_ChanGroup_Inherit bool = true
const Default_ACL_ChanGroup_Inheritable bool = true

func (m *ACL_ChanGroup) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *ACL_ChanGroup) GetInherited() bool {
	if m != nil && m.Inherited != nil {
		return *m.Inherited
	}
	return Default_ACL_ChanGroup_Inherited
}

func (m *ACL_ChanGroup) GetInherit() bool {
	if m != nil && m.Inherit != nil {
		return *m.Inherit
	}
	return Default_ACL_ChanGroup_Inherit
}

func (m *ACL_ChanGroup) GetInheritable() bool {
	if m != nil && m.Inheritable != nil {
		return *m.Inheritable
	}
	return Default_ACL_ChanGroup_Inheritable
}

func (m *ACL_ChanGroup) GetAdd() []uint32 {
	if m != nil {
		return m.Add
	}
	return nil
}

func (m *ACL_ChanGroup) GetRemove() []uint32 {
	if m != nil {
		return m.Remove
	}
	return nil
}

func (m *ACL_ChanGroup) GetInheritedMembers() []uint32 {
	if m != nil {
		return m.InheritedMembers
	}
	return nil
}

type ACL_ChanACL struct {
	ApplyHere        *bool   `protobuf:"varint,1,opt,name=apply_here,json=applyHere,def=1" json:"apply_here,omitempty"`
	ApplySubs        *bool   `protobuf:"varint,2,opt,name=apply_subs,json=applySubs,def=1" json:"apply_subs,omitempty"`
	Inherited        *bool   `protobuf:"varint,3,opt,name=inherited,def=1" json:"inherited,omitempty"`
	UserId           *uint32 `protobuf:"varint,4,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Group            *string `protobuf:"bytes,5,opt,name=group" json:"group,omitempty"`
	Grant            *uint32 `protobuf:"varint,6,opt,name=grant" json:"grant,omitempty"`
	Deny             *uint32 `protobuf:"varint,7,opt,name=deny" json:"deny,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ACL_ChanACL) Reset()                    { *m = ACL_ChanACL{} }
func (m *ACL_ChanACL) String() string            { return proto.CompactTextString(m) }
func (*ACL_ChanACL) ProtoMessage()               {}
func (*ACL_ChanACL) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14, 1} }

const Default_ACL_ChanACL_ApplyHere bool = true
const Default_ACL_ChanACL_ApplySubs bool = true
const Default_ACL_ChanACL_Inherited bool = true

func (m *ACL_ChanACL) GetApplyHere() bool {
	if m != nil && m.ApplyHere != nil {
		return *m.ApplyHere
	}
	return Default_ACL_ChanACL_ApplyHere
}

func (m *ACL_ChanACL) GetApplySubs() bool {
	if m != nil && m.ApplySubs != nil {
		return *m.ApplySubs
	}
	return Default_ACL_ChanACL_ApplySubs
}

func (m *ACL_ChanACL) GetInherited() bool {
	if m != nil && m.Inherited != nil {
		return *m.Inherited
	}
	return Default_ACL_ChanACL_Inherited
}

func (m *ACL_ChanACL) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *ACL_ChanACL) GetGroup() string {
	if m != nil && m.Group != nil {
		return *m.Group
	}
	return ""
}

func (m *ACL_ChanACL) GetGrant() uint32 {
	if m != nil && m.Grant != nil {
		return *m.Grant
	}
	return 0
}

func (m *ACL_ChanACL) GetDeny() uint32 {
	if m != nil && m.Deny != nil {
		return *m.Deny
	}
	return 0
}

type QueryUsers struct {
	Ids              []uint32 `protobuf:"varint,1,rep,name=ids" json:"ids,omitempty"`
	Names            []string `protobuf:"bytes,2,rep,name=names" json:"names,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *QueryUsers) Reset()                    { *m = QueryUsers{} }
func (m *QueryUsers) String() string            { return proto.CompactTextString(m) }
func (*QueryUsers) ProtoMessage()               {}
func (*QueryUsers) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *QueryUsers) GetIds() []uint32 {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *QueryUsers) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

type CryptSetup struct {
	Key              []byte `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	ClientNonce      []byte `protobuf:"bytes,2,opt,name=client_nonce,json=clientNonce" json:"client_nonce,omitempty"`
	ServerNonce      []byte `protobuf:"bytes,3,opt,name=server_nonce,json=serverNonce" json:"server_nonce,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CryptSetup) Reset()                    { *m = CryptSetup{} }
func (m *CryptSetup) String() string            { return proto.CompactTextString(m) }
func (*CryptSetup) ProtoMessage()               {}
func (*CryptSetup) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *CryptSetup) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *CryptSetup) GetClientNonce() []byte {
	if m != nil {
		return m.ClientNonce
	}
	return nil
}

func (m *CryptSetup) GetServerNonce() []byte {
	if m != nil {
		return m.ServerNonce
	}
	return nil
}

type ContextActionModify struct {
	Action           *string                        `protobuf:"bytes,1,req,name=action" json:"action,omitempty"`
	Text             *string                        `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
	Context          *uint32                        `protobuf:"varint,3,opt,name=context" json:"context,omitempty"`
	Operation        *ContextActionModify_Operation `protobuf:"varint,4,opt,name=operation,enum=mumble.ContextActionModify_Operation" json:"operation,omitempty"`
	XXX_unrecognized []byte                         `json:"-"`
}

func (m *ContextActionModify) Reset()                    { *m = ContextActionModify{} }
func (m *ContextActionModify) String() string            { return proto.CompactTextString(m) }
func (*ContextActionModify) ProtoMessage()               {}
func (*ContextActionModify) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *ContextActionModify) GetAction() string {
	if m != nil && m.Action != nil {
		return *m.Action
	}
	return ""
}

func (m *ContextActionModify) GetText() string {
	if m != nil && m.Text != nil {
		return *m.Text
	}
	return ""
}

func (m *ContextActionModify) GetContext() uint32 {
	if m != nil && m.Context != nil {
		return *m.Context
	}
	return 0
}

func (m *ContextActionModify) GetOperation() ContextActionModify_Operation {
	if m != nil && m.Operation != nil {
		return *m.Operation
	}
	return ContextActionModify_Add
}

type ContextAction struct {
	Session          *uint32 `protobuf:"varint,1,opt,name=session" json:"session,omitempty"`
	ChannelId        *uint32 `protobuf:"varint,2,opt,name=channel_id,json=channelId" json:"channel_id,omitempty"`
	Action           *string `protobuf:"bytes,3,req,name=action" json:"action,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ContextAction) Reset()                    { *m = ContextAction{} }
func (m *ContextAction) String() string            { return proto.CompactTextString(m) }
func (*ContextAction) ProtoMessage()               {}
func (*ContextAction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *ContextAction) GetSession() uint32 {
	if m != nil && m.Session != nil {
		return *m.Session
	}
	return 0
}

func (m *ContextAction) GetChannelId() uint32 {
	if m != nil && m.ChannelId != nil {
		return *m.ChannelId
	}
	return 0
}

func (m *ContextAction) GetAction() string {
	if m != nil && m.Action != nil {
		return *m.Action
	}
	return ""
}

type UserList struct {
	Users            []*UserList_User `protobuf:"bytes,1,rep,name=users" json:"users,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *UserList) Reset()                    { *m = UserList{} }
func (m *UserList) String() string            { return proto.CompactTextString(m) }
func (*UserList) ProtoMessage()               {}
func (*UserList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *UserList) GetUsers() []*UserList_User {
	if m != nil {
		return m.Users
	}
	return nil
}

type UserList_User struct {
	UserId           *uint32 `protobuf:"varint,1,req,name=user_id,json=userId" json:"user_id,omitempty"`
	Name             *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *UserList_User) Reset()                    { *m = UserList_User{} }
func (m *UserList_User) String() string            { return proto.CompactTextString(m) }
func (*UserList_User) ProtoMessage()               {}
func (*UserList_User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19, 0} }

func (m *UserList_User) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *UserList_User) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

type VoiceTarget struct {
	Id               *uint32               `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Targets          []*VoiceTarget_Target `protobuf:"bytes,2,rep,name=targets" json:"targets,omitempty"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *VoiceTarget) Reset()                    { *m = VoiceTarget{} }
func (m *VoiceTarget) String() string            { return proto.CompactTextString(m) }
func (*VoiceTarget) ProtoMessage()               {}
func (*VoiceTarget) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *VoiceTarget) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *VoiceTarget) GetTargets() []*VoiceTarget_Target {
	if m != nil {
		return m.Targets
	}
	return nil
}

type VoiceTarget_Target struct {
	Session          []uint32 `protobuf:"varint,1,rep,name=session" json:"session,omitempty"`
	ChannelId        *uint32  `protobuf:"varint,2,opt,name=channel_id,json=channelId" json:"channel_id,omitempty"`
	Group            *string  `protobuf:"bytes,3,opt,name=group" json:"group,omitempty"`
	Links            *bool    `protobuf:"varint,4,opt,name=links,def=0" json:"links,omitempty"`
	Children         *bool    `protobuf:"varint,5,opt,name=children,def=0" json:"children,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *VoiceTarget_Target) Reset()                    { *m = VoiceTarget_Target{} }
func (m *VoiceTarget_Target) String() string            { return proto.CompactTextString(m) }
func (*VoiceTarget_Target) ProtoMessage()               {}
func (*VoiceTarget_Target) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20, 0} }

const Default_VoiceTarget_Target_Links bool = false
const Default_VoiceTarget_Target_Children bool = false

func (m *VoiceTarget_Target) GetSession() []uint32 {
	if m != nil {
		return m.Session
	}
	return nil
}

func (m *VoiceTarget_Target) GetChannelId() uint32 {
	if m != nil && m.ChannelId != nil {
		return *m.ChannelId
	}
	return 0
}

func (m *VoiceTarget_Target) GetGroup() string {
	if m != nil && m.Group != nil {
		return *m.Group
	}
	return ""
}

func (m *VoiceTarget_Target) GetLinks() bool {
	if m != nil && m.Links != nil {
		return *m.Links
	}
	return Default_VoiceTarget_Target_Links
}

func (m *VoiceTarget_Target) GetChildren() bool {
	if m != nil && m.Children != nil {
		return *m.Children
	}
	return Default_VoiceTarget_Target_Children
}

type PermissionQuery struct {
	ChannelId        *uint32 `protobuf:"varint,1,opt,name=channel_id,json=channelId" json:"channel_id,omitempty"`
	Permissions      *uint32 `protobuf:"varint,2,opt,name=permissions" json:"permissions,omitempty"`
	Flush            *bool   `protobuf:"varint,3,opt,name=flush,def=0" json:"flush,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PermissionQuery) Reset()                    { *m = PermissionQuery{} }
func (m *PermissionQuery) String() string            { return proto.CompactTextString(m) }
func (*PermissionQuery) ProtoMessage()               {}
func (*PermissionQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

const Default_PermissionQuery_Flush bool = false

func (m *PermissionQuery) GetChannelId() uint32 {
	if m != nil && m.ChannelId != nil {
		return *m.ChannelId
	}
	return 0
}

func (m *PermissionQuery) GetPermissions() uint32 {
	if m != nil && m.Permissions != nil {
		return *m.Permissions
	}
	return 0
}

func (m *PermissionQuery) GetFlush() bool {
	if m != nil && m.Flush != nil {
		return *m.Flush
	}
	return Default_PermissionQuery_Flush
}

type CodecVersion struct {
	Alpha            *int32 `protobuf:"varint,1,req,name=alpha" json:"alpha,omitempty"`
	Beta             *int32 `protobuf:"varint,2,req,name=beta" json:"beta,omitempty"`
	PreferAlpha      *bool  `protobuf:"varint,3,req,name=prefer_alpha,json=preferAlpha,def=1" json:"prefer_alpha,omitempty"`
	Opus             *bool  `protobuf:"varint,4,opt,name=opus,def=0" json:"opus,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CodecVersion) Reset()                    { *m = CodecVersion{} }
func (m *CodecVersion) String() string            { return proto.CompactTextString(m) }
func (*CodecVersion) ProtoMessage()               {}
func (*CodecVersion) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

const Default_CodecVersion_PreferAlpha bool = true
const Default_CodecVersion_Opus bool = false

func (m *CodecVersion) GetAlpha() int32 {
	if m != nil && m.Alpha != nil {
		return *m.Alpha
	}
	return 0
}

func (m *CodecVersion) GetBeta() int32 {
	if m != nil && m.Beta != nil {
		return *m.Beta
	}
	return 0
}

func (m *CodecVersion) GetPreferAlpha() bool {
	if m != nil && m.PreferAlpha != nil {
		return *m.PreferAlpha
	}
	return Default_CodecVersion_PreferAlpha
}

func (m *CodecVersion) GetOpus() bool {
	if m != nil && m.Opus != nil {
		return *m.Opus
	}
	return Default_CodecVersion_Opus
}

type UserStats struct {
	Session           *uint32          `protobuf:"varint,1,opt,name=session" json:"session,omitempty"`
	StatsOnly         *bool            `protobuf:"varint,2,opt,name=stats_only,json=statsOnly,def=0" json:"stats_only,omitempty"`
	Certificates      [][]byte         `protobuf:"bytes,3,rep,name=certificates" json:"certificates,omitempty"`
	FromClient        *UserStats_Stats `protobuf:"bytes,4,opt,name=from_client,json=fromClient" json:"from_client,omitempty"`
	FromServer        *UserStats_Stats `protobuf:"bytes,5,opt,name=from_server,json=fromServer" json:"from_server,omitempty"`
	UdpPackets        *uint32          `protobuf:"varint,6,opt,name=udp_packets,json=udpPackets" json:"udp_packets,omitempty"`
	TcpPackets        *uint32          `protobuf:"varint,7,opt,name=tcp_packets,json=tcpPackets" json:"tcp_packets,omitempty"`
	UdpPingAvg        *float32         `protobuf:"fixed32,8,opt,name=udp_ping_avg,json=udpPingAvg" json:"udp_ping_avg,omitempty"`
	UdpPingVar        *float32         `protobuf:"fixed32,9,opt,name=udp_ping_var,json=udpPingVar" json:"udp_ping_var,omitempty"`
	TcpPingAvg        *float32         `protobuf:"fixed32,10,opt,name=tcp_ping_avg,json=tcpPingAvg" json:"tcp_ping_avg,omitempty"`
	TcpPingVar        *float32         `protobuf:"fixed32,11,opt,name=tcp_ping_var,json=tcpPingVar" json:"tcp_ping_var,omitempty"`
	Version           *Version         `protobuf:"bytes,12,opt,name=version" json:"version,omitempty"`
	CeltVersions      []int32          `protobuf:"varint,13,rep,name=celt_versions,json=celtVersions" json:"celt_versions,omitempty"`
	Address           []byte           `protobuf:"bytes,14,opt,name=address" json:"address,omitempty"`
	Bandwidth         *uint32          `protobuf:"varint,15,opt,name=bandwidth" json:"bandwidth,omitempty"`
	Onlinesecs        *uint32          `protobuf:"varint,16,opt,name=onlinesecs" json:"onlinesecs,omitempty"`
	Idlesecs          *uint32          `protobuf:"varint,17,opt,name=idlesecs" json:"idlesecs,omitempty"`
	StrongCertificate *bool            `protobuf:"varint,18,opt,name=strong_certificate,json=strongCertificate,def=0" json:"strong_certificate,omitempty"`
	Opus              *bool            `protobuf:"varint,19,opt,name=opus,def=0" json:"opus,omitempty"`
	XXX_unrecognized  []byte           `json:"-"`
}

func (m *UserStats) Reset()                    { *m = UserStats{} }
func (m *UserStats) String() string            { return proto.CompactTextString(m) }
func (*UserStats) ProtoMessage()               {}
func (*UserStats) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

const Default_UserStats_StatsOnly bool = false
const Default_UserStats_StrongCertificate bool = false
const Default_UserStats_Opus bool = false

func (m *UserStats) GetSession() uint32 {
	if m != nil && m.Session != nil {
		return *m.Session
	}
	return 0
}

func (m *UserStats) GetStatsOnly() bool {
	if m != nil && m.StatsOnly != nil {
		return *m.StatsOnly
	}
	return Default_UserStats_StatsOnly
}

func (m *UserStats) GetCertificates() [][]byte {
	if m != nil {
		return m.Certificates
	}
	return nil
}

func (m *UserStats) GetFromClient() *UserStats_Stats {
	if m != nil {
		return m.FromClient
	}
	return nil
}

func (m *UserStats) GetFromServer() *UserStats_Stats {
	if m != nil {
		return m.FromServer
	}
	return nil
}

func (m *UserStats) GetUdpPackets() uint32 {
	if m != nil && m.UdpPackets != nil {
		return *m.UdpPackets
	}
	return 0
}

func (m *UserStats) GetTcpPackets() uint32 {
	if m != nil && m.TcpPackets != nil {
		return *m.TcpPackets
	}
	return 0
}

func (m *UserStats) GetUdpPingAvg() float32 {
	if m != nil && m.UdpPingAvg != nil {
		return *m.UdpPingAvg
	}
	return 0
}

func (m *UserStats) GetUdpPingVar() float32 {
	if m != nil && m.UdpPingVar != nil {
		return *m.UdpPingVar
	}
	return 0
}

func (m *UserStats) GetTcpPingAvg() float32 {
	if m != nil && m.TcpPingAvg != nil {
		return *m.TcpPingAvg
	}
	return 0
}

func (m *UserStats) GetTcpPingVar() float32 {
	if m != nil && m.TcpPingVar != nil {
		return *m.TcpPingVar
	}
	return 0
}

func (m *UserStats) GetVersion() *Version {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *UserStats) GetCeltVersions() []int32 {
	if m != nil {
		return m.CeltVersions
	}
	return nil
}

func (m *UserStats) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *UserStats) GetBandwidth() uint32 {
	if m != nil && m.Bandwidth != nil {
		return *m.Bandwidth
	}
	return 0
}

func (m *UserStats) GetOnlinesecs() uint32 {
	if m != nil && m.Onlinesecs != nil {
		return *m.Onlinesecs
	}
	return 0
}

func (m *UserStats) GetIdlesecs() uint32 {
	if m != nil && m.Idlesecs != nil {
		return *m.Idlesecs
	}
	return 0
}

func (m *UserStats) GetStrongCertificate() bool {
	if m != nil && m.StrongCertificate != nil {
		return *m.StrongCertificate
	}
	return Default_UserStats_StrongCertificate
}

func (m *UserStats) GetOpus() bool {
	if m != nil && m.Opus != nil {
		return *m.Opus
	}
	return Default_UserStats_Opus
}

type UserStats_Stats struct {
	Good             *uint32 `protobuf:"varint,1,opt,name=good" json:"good,omitempty"`
	Late             *uint32 `protobuf:"varint,2,opt,name=late" json:"late,omitempty"`
	Lost             *uint32 `protobuf:"varint,3,opt,name=lost" json:"lost,omitempty"`
	Resync           *uint32 `protobuf:"varint,4,opt,name=resync" json:"resync,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *UserStats_Stats) Reset()                    { *m = UserStats_Stats{} }
func (m *UserStats_Stats) String() string            { return proto.CompactTextString(m) }
func (*UserStats_Stats) ProtoMessage()               {}
func (*UserStats_Stats) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23, 0} }

func (m *UserStats_Stats) GetGood() uint32 {
	if m != nil && m.Good != nil {
		return *m.Good
	}
	return 0
}

func (m *UserStats_Stats) GetLate() uint32 {
	if m != nil && m.Late != nil {
		return *m.Late
	}
	return 0
}

func (m *UserStats_Stats) GetLost() uint32 {
	if m != nil && m.Lost != nil {
		return *m.Lost
	}
	return 0
}

func (m *UserStats_Stats) GetResync() uint32 {
	if m != nil && m.Resync != nil {
		return *m.Resync
	}
	return 0
}

type SuggestConfig struct {
	Version          *uint32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Positional       *bool   `protobuf:"varint,2,opt,name=positional" json:"positional,omitempty"`
	PushToTalk       *bool   `protobuf:"varint,3,opt,name=push_to_talk,json=pushToTalk" json:"push_to_talk,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SuggestConfig) Reset()                    { *m = SuggestConfig{} }
func (m *SuggestConfig) String() string            { return proto.CompactTextString(m) }
func (*SuggestConfig) ProtoMessage()               {}
func (*SuggestConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *SuggestConfig) GetVersion() uint32 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return 0
}

func (m *SuggestConfig) GetPositional() bool {
	if m != nil && m.Positional != nil {
		return *m.Positional
	}
	return false
}

func (m *SuggestConfig) GetPushToTalk() bool {
	if m != nil && m.PushToTalk != nil {
		return *m.PushToTalk
	}
	return false
}

type RequestBlob struct {
	SessionTexture     []uint32 `protobuf:"varint,1,rep,name=session_texture,json=sessionTexture" json:"session_texture,omitempty"`
	SessionComment     []uint32 `protobuf:"varint,2,rep,name=session_comment,json=sessionComment" json:"session_comment,omitempty"`
	ChannelDescription []uint32 `protobuf:"varint,3,rep,name=channel_description,json=channelDescription" json:"channel_description,omitempty"`
	XXX_unrecognized   []byte   `json:"-"`
}

func (m *RequestBlob) Reset()                    { *m = RequestBlob{} }
func (m *RequestBlob) String() string            { return proto.CompactTextString(m) }
func (*RequestBlob) ProtoMessage()               {}
func (*RequestBlob) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *RequestBlob) GetSessionTexture() []uint32 {
	if m != nil {
		return m.SessionTexture
	}
	return nil
}

func (m *RequestBlob) GetSessionComment() []uint32 {
	if m != nil {
		return m.SessionComment
	}
	return nil
}

func (m *RequestBlob) GetChannelDescription() []uint32 {
	if m != nil {
		return m.ChannelDescription
	}
	return nil
}

func init() {
	proto.RegisterType((*Version)(nil), "mumble.Version")
	proto.RegisterType((*UDPTunnel)(nil), "mumble.UDPTunnel")
	proto.RegisterType((*Authenticate)(nil), "mumble.Authenticate")
	proto.RegisterType((*Ping)(nil), "mumble.Ping")
	proto.RegisterType((*Reject)(nil), "mumble.Reject")
	proto.RegisterType((*ServerConfig)(nil), "mumble.ServerConfig")
	proto.RegisterType((*ServerSync)(nil), "mumble.ServerSync")
	proto.RegisterType((*ChannelRemove)(nil), "mumble.ChannelRemove")
	proto.RegisterType((*ChannelState)(nil), "mumble.ChannelState")
	proto.RegisterType((*UserRemove)(nil), "mumble.UserRemove")
	proto.RegisterType((*UserState)(nil), "mumble.UserState")
	proto.RegisterType((*BanList)(nil), "mumble.BanList")
	proto.RegisterType((*BanList_BanEntry)(nil), "mumble.BanList.BanEntry")
	proto.RegisterType((*TextMessage)(nil), "mumble.TextMessage")
	proto.RegisterType((*PermissionDenied)(nil), "mumble.PermissionDenied")
	proto.RegisterType((*ACL)(nil), "mumble.ACL")
	proto.RegisterType((*ACL_ChanGroup)(nil), "mumble.ACL.ChanGroup")
	proto.RegisterType((*ACL_ChanACL)(nil), "mumble.ACL.ChanACL")
	proto.RegisterType((*QueryUsers)(nil), "mumble.QueryUsers")
	proto.RegisterType((*CryptSetup)(nil), "mumble.CryptSetup")
	proto.RegisterType((*ContextActionModify)(nil), "mumble.ContextActionModify")
	proto.RegisterType((*ContextAction)(nil), "mumble.ContextAction")
	proto.RegisterType((*UserList)(nil), "mumble.UserList")
	proto.RegisterType((*UserList_User)(nil), "mumble.UserList.User")
	proto.RegisterType((*VoiceTarget)(nil), "mumble.VoiceTarget")
	proto.RegisterType((*VoiceTarget_Target)(nil), "mumble.VoiceTarget.Target")
	proto.RegisterType((*PermissionQuery)(nil), "mumble.PermissionQuery")
	proto.RegisterType((*CodecVersion)(nil), "mumble.CodecVersion")
	proto.RegisterType((*UserStats)(nil), "mumble.UserStats")
	proto.RegisterType((*UserStats_Stats)(nil), "mumble.UserStats.Stats")
	proto.RegisterType((*SuggestConfig)(nil), "mumble.SuggestConfig")
	proto.RegisterType((*RequestBlob)(nil), "mumble.RequestBlob")
	proto.RegisterEnum("mumble.Reject_RejectType", Reject_RejectType_name, Reject_RejectType_value)
	proto.RegisterEnum("mumble.PermissionDenied_DenyType", PermissionDenied_DenyType_name, PermissionDenied_DenyType_value)
	proto.RegisterEnum("mumble.ContextActionModify_Context", ContextActionModify_Context_name, ContextActionModify_Context_value)
	proto.RegisterEnum("mumble.ContextActionModify_Operation", ContextActionModify_Operation_name, ContextActionModify_Operation_value)
}

func init() { proto.RegisterFile("mumble/mumble.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2473 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x58, 0xcb, 0x72, 0x24, 0x47,
	0xd5, 0x76, 0xf5, 0xbd, 0x4e, 0x77, 0x4b, 0xa5, 0x94, 0x6c, 0xb7, 0xe5, 0xcb, 0x2f, 0xd7, 0xfc,
	0xc6, 0x72, 0xd8, 0x96, 0x1d, 0xc3, 0x10, 0x01, 0xde, 0x69, 0x7a, 0x30, 0x52, 0x20, 0xcd, 0x0c,
	0x25, 0xcd, 0x78, 0xc1, 0xa2, 0x28, 0x55, 0xa5, 0xba, 0x0b, 0x55, 0x55, 0x96, 0x2b, 0xb3, 0x34,
	0xd3, 0x11, 0x6c, 0x78, 0x02, 0xcc, 0x8a, 0x1d, 0xde, 0x13, 0xc1, 0x33, 0x40, 0xf0, 0x00, 0x04,
	0xcf, 0xc0, 0x9e, 0x08, 0xd6, 0xac, 0x88, 0x73, 0x32, 0xeb, 0xd2, 0x1a, 0x8d, 0x07, 0xb6, 0x6c,
	0xba, 0xf3, 0x7c, 0xf9, 0x55, 0x5e, 0x4e, 0x9e, 0x5b, 0x26, 0x6c, 0xa7, 0x65, 0x7a, 0x91, 0xf0,
	0xcf, 0xf4, 0xdf, 0x41, 0x5e, 0x08, 0x25, 0xd8, 0x40, 0x4b, 0xee, 0x6f, 0x2c, 0x18, 0x3e, 0xe5,
	0x85, 0x8c, 0x45, 0xc6, 0x66, 0x30, 0xbc, 0xd6, 0xcd, 0x99, 0xb5, 0x67, 0xed, 0x4f, 0xbd, 0x4a,
	0xc4, 0x9e, 0x82, 0x27, 0x3c, 0x90, 0x7c, 0xd6, 0xd9, 0xb3, 0xf6, 0x6d, 0xaf, 0x12, 0xd9, 0x06,
	0x74, 0x84, 0x9c, 0x75, 0x09, 0xec, 0x08, 0xc9, 0xde, 0x05, 0x10, 0xd2, 0xaf, 0x86, 0xe9, 0x11,
	0x6e, 0x0b, 0x59, 0x4d, 0xf1, 0x3e, 0x4c, 0xc2, 0x62, 0x95, 0x2b, 0xe1, 0xa7, 0x22, 0xe2, 0x72,
	0xd6, 0xdf, 0xeb, 0xee, 0xdb, 0xde, 0x58, 0x63, 0xa7, 0x08, 0xb9, 0x77, 0xc0, 0x7e, 0xf2, 0xe0,
	0xf1, 0x79, 0x99, 0x65, 0x3c, 0x61, 0x6f, 0xc0, 0x20, 0x0f, 0xc2, 0x2b, 0xae, 0x66, 0xd6, 0x5e,
	0x67, 0x7f, 0xe2, 0x19, 0xc9, 0xfd, 0xbd, 0x05, 0x93, 0xc3, 0x52, 0x2d, 0x79, 0xa6, 0xe2, 0x30,
	0x50, 0x9c, 0xed, 0xc2, 0xa8, 0x94, 0xbc, 0xc8, 0x82, 0x94, 0xd3, 0xe2, 0x6d, 0xaf, 0x96, 0xb1,
	0x2f, 0x0f, 0xa4, 0x7c, 0x26, 0x8a, 0xc8, 0x2c, 0xbf, 0x96, 0x71, 0x02, 0x25, 0xae, 0x78, 0x86,
	0x7b, 0xc0, 0xa5, 0x18, 0x89, 0xdd, 0x81, 0x69, 0xc8, 0x13, 0x55, 0xed, 0x44, 0xce, 0x7a, 0x7b,
	0xdd, 0xfd, 0xbe, 0x37, 0x41, 0xd0, 0x6c, 0x46, 0xb2, 0xb7, 0xa0, 0x27, 0xf2, 0x12, 0x77, 0x61,
	0xed, 0x8f, 0xbe, 0xe8, 0x5f, 0x06, 0x89, 0xe4, 0x1e, 0x41, 0xee, 0x5f, 0x3a, 0xd0, 0x7b, 0x1c,
	0x67, 0x0b, 0xf6, 0x0e, 0xd8, 0x2a, 0x4e, 0xb9, 0x54, 0x41, 0x9a, 0xd3, 0xca, 0x7a, 0x5e, 0x03,
	0x30, 0x06, 0xbd, 0x85, 0x10, 0x7a, 0x59, 0x53, 0x8f, 0xda, 0x88, 0x25, 0x81, 0xe2, 0xa4, 0xd4,
	0xa9, 0x47, 0x6d, 0xc2, 0x84, 0x54, 0xa4, 0x50, 0xc4, 0x84, 0x54, 0xb8, 0xf4, 0x82, 0xcb, 0x55,
	0x16, 0xd2, 0xfc, 0x53, 0xcf, 0x48, 0xec, 0xff, 0x60, 0x5c, 0x46, 0xb9, 0xaf, 0x35, 0x25, 0x67,
	0x03, 0xea, 0x84, 0x32, 0xca, 0x1f, 0x6b, 0x04, 0x09, 0x2a, 0x6c, 0x08, 0x43, 0x4d, 0x50, 0x61,
	0x4d, 0xd8, 0x83, 0x09, 0x8d, 0x10, 0x67, 0x0b, 0x3f, 0xb8, 0x5e, 0xcc, 0x46, 0x7b, 0xd6, 0x7e,
	0x47, 0x0f, 0x11, 0x67, 0x8b, 0xc3, 0xeb, 0xc5, 0x1a, 0xe3, 0x3a, 0x28, 0x66, 0xf6, 0x1a, 0xe3,
	0x69, 0x50, 0x20, 0x83, 0x26, 0xa9, 0xc6, 0x00, 0xcd, 0xc0, 0x59, 0x9a, 0x31, 0x6a, 0x06, 0x8e,
	0x31, 0x5e, 0x63, 0x3c, 0x0d, 0x0a, 0xf7, 0xb7, 0x1d, 0x18, 0x78, 0xfc, 0x97, 0x3c, 0x54, 0xec,
	0x53, 0xe8, 0xa9, 0x55, 0xae, 0xcf, 0x76, 0xe3, 0xee, 0x5b, 0x07, 0xc6, 0x98, 0x75, 0xaf, 0xf9,
	0x3b, 0x5f, 0xe5, 0xdc, 0x23, 0x9a, 0xd6, 0x4d, 0x20, 0x45, 0x66, 0x0e, 0xdc, 0x48, 0xee, 0x9f,
	0x2c, 0x80, 0x86, 0xcc, 0x46, 0xd0, 0x7b, 0x28, 0x32, 0xee, 0xbc, 0xc6, 0x1c, 0x98, 0x7c, 0x55,
	0x88, 0x6c, 0x61, 0xce, 0xd6, 0xb1, 0xd8, 0x36, 0x6c, 0x1e, 0x67, 0xd7, 0x41, 0x12, 0x47, 0x4f,
	0x8c, 0x21, 0x39, 0x1d, 0xb6, 0x09, 0x63, 0xa2, 0x21, 0xf4, 0xf8, 0x2b, 0xa7, 0xcb, 0xb6, 0x60,
	0x4a, 0xc0, 0x19, 0x2f, 0xae, 0x09, 0xea, 0x21, 0x54, 0x7d, 0x71, 0x9c, 0x3d, 0x91, 0xdc, 0xe9,
	0xb3, 0x0d, 0x00, 0x4d, 0xf8, 0xb2, 0x4c, 0x12, 0x67, 0x80, 0x94, 0x87, 0x62, 0xce, 0x0b, 0x15,
	0x5f, 0x92, 0xf9, 0x3a, 0x43, 0xf6, 0x3a, 0x6c, 0xb5, 0x0c, 0x5a, 0x14, 0x5f, 0x06, 0x71, 0xe2,
	0x8c, 0x70, 0xc2, 0xf9, 0x32, 0x40, 0x5f, 0xa0, 0x85, 0xda, 0xee, 0x5f, 0x2d, 0x98, 0xe8, 0xb1,
	0xe6, 0x22, 0xbb, 0x8c, 0x17, 0x68, 0xa9, 0x69, 0xf0, 0xdc, 0xbf, 0x08, 0xb2, 0xe8, 0x59, 0x1c,
	0xa9, 0xa5, 0xf1, 0xdd, 0x49, 0x1a, 0x3c, 0xbf, 0x5f, 0x61, 0xe8, 0x77, 0xcf, 0x78, 0x12, 0x8a,
	0x94, 0xfb, 0x8a, 0x3f, 0x57, 0x46, 0x2b, 0x63, 0x83, 0x9d, 0xf3, 0xe7, 0x0a, 0x3d, 0x37, 0x48,
	0x12, 0xf1, 0xcc, 0x5f, 0xaa, 0x34, 0x21, 0xe3, 0x1b, 0x79, 0x36, 0x21, 0x47, 0x2a, 0x4d, 0xd8,
	0x07, 0xb0, 0x91, 0x72, 0x29, 0x83, 0x05, 0xf7, 0x13, 0x9e, 0x2d, 0xd4, 0xd2, 0xd8, 0xe2, 0xd4,
	0xa0, 0x27, 0x04, 0xb2, 0xcf, 0x61, 0x27, 0x4e, 0x91, 0x74, 0x83, 0xac, 0x4d, 0x94, 0x51, 0xdf,
	0x69, 0xfb, 0x0b, 0xf7, 0x1b, 0xab, 0x52, 0xce, 0x19, 0x5a, 0xef, 0x0c, 0x86, 0x92, 0xcb, 0x76,
	0x10, 0x32, 0xe2, 0x8b, 0x1b, 0xed, 0xfc, 0x07, 0x1b, 0xed, 0xbe, 0xb8, 0xd1, 0x3d, 0x18, 0xe7,
	0xbc, 0x48, 0x63, 0x59, 0x39, 0x36, 0xfa, 0x64, 0x1b, 0x72, 0x0f, 0x60, 0x6a, 0x94, 0xee, 0xf1,
	0x54, 0x5c, 0x73, 0xd4, 0x4d, 0xa8, 0x01, 0x3f, 0x8e, 0x28, 0x14, 0x4d, 0x3d, 0xdb, 0x20, 0xc7,
	0x91, 0xfb, 0xe7, 0x0e, 0x4c, 0xcc, 0x07, 0x67, 0x0a, 0xdd, 0xf5, 0x26, 0xdf, 0x5a, 0xe3, 0xeb,
	0xa8, 0x56, 0xf0, 0x4c, 0x99, 0x2d, 0x18, 0x09, 0xbd, 0x9c, 0x02, 0x98, 0x5e, 0x34, 0xb5, 0xd9,
	0x0e, 0xf4, 0x93, 0x38, 0xbb, 0xd2, 0x01, 0x68, 0xea, 0x69, 0x01, 0xf7, 0x10, 0x71, 0x19, 0x16,
	0x71, 0xae, 0x50, 0x53, 0x7d, 0xbd, 0xcb, 0x16, 0xc4, 0xde, 0x06, 0x9b, 0xa8, 0x7e, 0x10, 0x45,
	0xb3, 0x01, 0x7d, 0x3b, 0x22, 0xe0, 0x30, 0x8a, 0x50, 0x4b, 0xba, 0xb3, 0xa0, 0xfd, 0xcd, 0x86,
	0xd4, 0x3f, 0x26, 0xcc, 0x6c, 0xf9, 0x0e, 0xd8, 0x8a, 0xa7, 0xb9, 0x28, 0x82, 0x62, 0x45, 0x01,
	0xa0, 0x0e, 0x70, 0x0d, 0xce, 0xde, 0x85, 0x51, 0x2e, 0x64, 0x4c, 0x6b, 0xc0, 0x10, 0xd0, 0xff,
	0xc2, 0xfa, 0xdc, 0xab, 0x21, 0xf6, 0x11, 0x38, 0xad, 0x25, 0xf9, 0xcb, 0x40, 0x2e, 0x29, 0x0e,
	0x4c, 0xbc, 0xcd, 0x16, 0x7e, 0x14, 0xc8, 0xa5, 0x7b, 0x09, 0x80, 0x4e, 0x63, 0x26, 0x5f, 0x33,
	0x82, 0x4e, 0xdb, 0x08, 0x76, 0xa0, 0x1f, 0x84, 0x4a, 0x14, 0x46, 0x73, 0x5a, 0x68, 0xb9, 0x7b,
	0xb7, 0xed, 0xee, 0xcc, 0x81, 0xee, 0x45, 0xa0, 0xd3, 0xd0, 0xc8, 0xc3, 0xa6, 0xfb, 0xc7, 0x3e,
	0xd8, 0x38, 0x91, 0x3e, 0xa7, 0x97, 0x1b, 0xdb, 0xed, 0xf3, 0xdc, 0x76, 0x40, 0x6f, 0xc2, 0x10,
	0x33, 0x0d, 0x1e, 0xb4, 0xf6, 0x88, 0x01, 0x8a, 0xc7, 0xd1, 0x0d, 0x23, 0xe8, 0xdf, 0x34, 0x02,
	0x06, 0xbd, 0xb4, 0x54, 0x9c, 0xe2, 0xf3, 0xc8, 0xa3, 0x36, 0x62, 0x11, 0x0f, 0x2e, 0x29, 0x24,
	0x8f, 0x3c, 0x6a, 0x63, 0xf6, 0x92, 0x65, 0x9e, 0x17, 0x5c, 0x4a, 0x7d, 0x0e, 0x5e, 0x2d, 0xe3,
	0x21, 0x4b, 0x9e, 0x5c, 0xfa, 0x34, 0x90, 0x6d, 0x3a, 0x79, 0x72, 0x79, 0x8a, 0x83, 0x55, 0x9d,
	0x34, 0x22, 0x34, 0x9d, 0x0f, 0x70, 0xd4, 0x19, 0x0c, 0xd1, 0x3f, 0xca, 0x82, 0x53, 0xdc, 0x9d,
	0x78, 0x95, 0x88, 0x8e, 0x9e, 0x27, 0xe5, 0x22, 0xce, 0xfc, 0x50, 0x64, 0xe4, 0x43, 0x13, 0x22,
	0x4c, 0x35, 0x3a, 0xd7, 0x20, 0xfb, 0x10, 0x36, 0x0d, 0x2d, 0x8e, 0x30, 0x68, 0xa9, 0xd5, 0x6c,
	0x4a, 0x5a, 0x31, 0x5f, 0x1f, 0x1b, 0x14, 0x67, 0x0a, 0x45, 0x9a, 0xa2, 0xb5, 0x6f, 0xe8, 0xda,
	0xc1, 0x88, 0xb8, 0x5b, 0x32, 0x89, 0x4d, 0xad, 0x4d, 0x6c, 0x53, 0x81, 0xa0, 0xbb, 0xb5, 0xb9,
	0x38, 0x34, 0xf7, 0xd8, 0x60, 0x47, 0x86, 0x62, 0xd6, 0xaa, 0x29, 0x5b, 0x9a, 0x62, 0x30, 0xa2,
	0x7c, 0x04, 0x4e, 0x5e, 0xc4, 0xa2, 0x88, 0xd5, 0xca, 0x97, 0x39, 0x0f, 0xae, 0x78, 0x31, 0x63,
	0xa4, 0x81, 0xcd, 0x0a, 0x3f, 0xd3, 0x30, 0xe6, 0xe7, 0x82, 0x87, 0xa2, 0x88, 0xe2, 0x6c, 0x31,
	0xdb, 0xd6, 0x51, 0xaf, 0x06, 0xa8, 0x0c, 0x30, 0x67, 0x28, 0x9e, 0x65, 0xbc, 0x98, 0xed, 0x10,
	0x63, 0x62, 0xc0, 0x47, 0x88, 0xb1, 0x7d, 0x70, 0xf8, 0xf3, 0x58, 0x2a, 0xbf, 0x94, 0xc1, 0x45,
	0xc2, 0xfd, 0x34, 0x0e, 0x67, 0xaf, 0x13, 0x6f, 0x83, 0xf0, 0x27, 0x04, 0x9f, 0xc6, 0x21, 0x46,
	0xc7, 0x35, 0x66, 0xb5, 0xb6, 0x37, 0x88, 0xcd, 0x5a, 0x6c, 0xb3, 0x3c, 0xf7, 0xd7, 0x1d, 0x18,
	0xde, 0x0f, 0xb2, 0x93, 0x58, 0x2a, 0xf6, 0x09, 0xf4, 0x2e, 0x82, 0x4c, 0xce, 0xac, 0xbd, 0xee,
	0xfe, 0xf8, 0xee, 0xac, 0xca, 0x81, 0xa6, 0x1b, 0xff, 0x7f, 0x9c, 0xa9, 0x62, 0xe5, 0x11, 0x8b,
	0xbd, 0x0d, 0xfd, 0xaf, 0x4b, 0x5e, 0xac, 0xc8, 0x82, 0x6b, 0xe7, 0xd5, 0xd8, 0xee, 0x1f, 0x2c,
	0x18, 0x55, 0x7c, 0x3c, 0xa1, 0x20, 0x8a, 0xc8, 0xc0, 0x74, 0x95, 0x55, 0x89, 0x64, 0xa3, 0x81,
	0xbc, 0x9a, 0x75, 0xc8, 0x09, 0xa9, 0x7d, 0xab, 0x0f, 0x54, 0x27, 0xd9, 0x6b, 0x9d, 0x64, 0xe3,
	0x93, 0xfd, 0x35, 0x9f, 0xdc, 0x81, 0xbe, 0x54, 0x41, 0xa1, 0xc8, 0xf0, 0x6d, 0x4f, 0x0b, 0x68,
	0xe5, 0x51, 0x59, 0x04, 0x14, 0x49, 0x74, 0x41, 0x52, 0xcb, 0x58, 0xa3, 0x8e, 0x31, 0x72, 0x9b,
	0xbc, 0xd1, 0xf8, 0xa6, 0xd5, 0xf6, 0xcd, 0x96, 0x2f, 0x77, 0x28, 0x9c, 0xd5, 0xbe, 0xbc, 0xee,
	0x88, 0x5d, 0xea, 0x6c, 0x39, 0xe2, 0x9b, 0x30, 0x54, 0x05, 0xe7, 0xda, 0x81, 0xb1, 0x6f, 0x80,
	0xe2, 0x71, 0x84, 0x23, 0x9a, 0x2c, 0x36, 0xeb, 0xef, 0x75, 0xd0, 0x72, 0x8d, 0xe8, 0x7e, 0xdb,
	0x05, 0xe7, 0x71, 0x9d, 0x30, 0x1e, 0xf0, 0x2c, 0xe6, 0x11, 0x7b, 0x0f, 0xa0, 0x49, 0x22, 0x66,
	0x6d, 0x2d, 0xe4, 0xc6, 0x32, 0x3a, 0x37, 0xe3, 0x41, 0x6b, 0xfd, 0xdd, 0xf5, 0x58, 0xd4, 0x68,
	0xb2, 0xb7, 0xa6, 0xc9, 0x1f, 0x98, 0x9a, 0xa8, 0x4f, 0x35, 0xd1, 0xfb, 0x95, 0x3d, 0xdc, 0x5c,
	0xd8, 0xc1, 0x03, 0x9e, 0xad, 0x5a, 0xb5, 0x51, 0x75, 0x80, 0x83, 0xe6, 0x00, 0xb1, 0xaa, 0x18,
	0x55, 0x34, 0xac, 0x8a, 0x50, 0xdd, 0xce, 0x6b, 0x58, 0xb7, 0x34, 0xa3, 0x39, 0x16, 0x9b, 0x82,
	0x7d, 0x56, 0xe6, 0xbc, 0xc0, 0x08, 0xaa, 0xab, 0xa1, 0xaa, 0x38, 0xc1, 0xf2, 0xa8, 0x8b, 0x00,
	0x7e, 0x79, 0x2e, 0xc4, 0x89, 0xc8, 0x16, 0x4e, 0x8f, 0x0d, 0xa1, 0x7b, 0xf4, 0xa3, 0x9f, 0x3a,
	0x7d, 0xb6, 0x03, 0xce, 0x79, 0x95, 0x36, 0xcc, 0x37, 0xce, 0x80, 0xbd, 0x01, 0xec, 0x14, 0x07,
	0xcf, 0x16, 0xeb, 0xc5, 0xd0, 0x04, 0x46, 0x38, 0x05, 0x8d, 0xda, 0xae, 0x81, 0xa8, 0x7c, 0xb2,
	0xb1, 0x58, 0x7b, 0xc8, 0xa5, 0x8a, 0xb3, 0xc5, 0x49, 0x9c, 0xc6, 0xca, 0x01, 0xa4, 0x18, 0x8f,
	0x21, 0xca, 0xd8, 0xfd, 0x57, 0x0f, 0xba, 0x87, 0xf3, 0x93, 0x57, 0x64, 0x6e, 0xf6, 0x21, 0x4c,
	0xe2, 0x6c, 0xc9, 0x8b, 0x58, 0xf9, 0x41, 0x98, 0x48, 0xe3, 0x2b, 0x3d, 0x55, 0x94, 0xdc, 0x1b,
	0x9b, 0x9e, 0xc3, 0x30, 0x91, 0xec, 0x53, 0x18, 0x2c, 0x0a, 0x51, 0xe6, 0xfa, 0x9e, 0x30, 0xbe,
	0xfb, 0x7a, 0xa5, 0xed, 0xc3, 0xf9, 0xc9, 0x01, 0xae, 0xee, 0x27, 0xd8, 0xeb, 0x19, 0x12, 0xfb,
	0x10, 0x7a, 0x34, 0x5e, 0x8f, 0xc8, 0xdb, 0x37, 0xc9, 0x87, 0xf3, 0x13, 0x8f, 0x08, 0x8d, 0x97,
	0xf6, 0x6f, 0xf1, 0xd2, 0xbf, 0x5b, 0x60, 0xd7, 0x63, 0xd7, 0xe7, 0x66, 0x91, 0x2d, 0x6a, 0xc7,
	0x73, 0xc1, 0x36, 0xab, 0xe4, 0xd1, 0xda, 0xe2, 0x1b, 0x98, 0xbd, 0x07, 0x43, 0x23, 0xe8, 0xaa,
	0xce, 0x30, 0x2a, 0x90, 0x7d, 0x0f, 0xaa, 0x9d, 0x62, 0xe0, 0xd1, 0xc9, 0xf2, 0x86, 0x0a, 0xb0,
	0x03, 0x93, 0x29, 0xd6, 0x12, 0x7d, 0xf2, 0x11, 0x6c, 0x6a, 0xc3, 0xa4, 0x02, 0x42, 0x17, 0x18,
	0x46, 0x62, 0x1f, 0xc3, 0x56, 0x3d, 0xbd, 0x9f, 0xf2, 0xf4, 0x82, 0x17, 0xd2, 0xd4, 0x18, 0x4e,
	0xdd, 0x71, 0xaa, 0xf1, 0xdd, 0xbf, 0x59, 0x30, 0x34, 0x3a, 0x61, 0x77, 0x00, 0x82, 0x3c, 0x4f,
	0x56, 0xfe, 0x92, 0x17, 0xba, 0xd6, 0xaf, 0xf7, 0x43, 0xf8, 0x11, 0x2f, 0x78, 0x43, 0x92, 0xe5,
	0xc5, 0xfa, 0x89, 0x69, 0xd2, 0x59, 0x79, 0x21, 0xd7, 0x15, 0xd3, 0xbd, 0x5d, 0x31, 0x2f, 0xcd,
	0xdc, 0x3b, 0xd0, 0xa7, 0x73, 0x34, 0x91, 0x4b, 0x0b, 0x1a, 0x0d, 0x32, 0x65, 0x6e, 0x54, 0x5a,
	0xd0, 0x29, 0x3b, 0x5b, 0x99, 0xa0, 0x45, 0x6d, 0xf7, 0x1e, 0xc0, 0xcf, 0xf0, 0x00, 0xd1, 0x86,
	0x25, 0xea, 0x2d, 0x8e, 0x74, 0xd4, 0x9e, 0x7a, 0xd8, 0xc4, 0x91, 0xf0, 0xf4, 0x24, 0x05, 0x2a,
	0xdb, 0xd3, 0x82, 0x1b, 0x01, 0xcc, 0xf1, 0x1e, 0x7c, 0xc6, 0x55, 0x99, 0xe3, 0x57, 0x57, 0x7c,
	0x45, 0x3a, 0x98, 0x78, 0xd8, 0xa4, 0xd4, 0x98, 0xc4, 0x98, 0x19, 0x33, 0x91, 0x85, 0xfa, 0x26,
	0x8e, 0xa9, 0x91, 0xb0, 0x87, 0x08, 0x21, 0x45, 0x52, 0x29, 0x6d, 0x28, 0x5d, 0x4d, 0xd1, 0x18,
	0x51, 0xdc, 0x7f, 0x5a, 0xb0, 0x6d, 0x72, 0xf8, 0x61, 0x88, 0xe1, 0xf5, 0x54, 0x44, 0xf1, 0xe5,
	0x0a, 0xcf, 0x32, 0x20, 0xd9, 0xd8, 0x97, 0x91, 0x70, 0x7f, 0xad, 0x1b, 0x03, 0xb5, 0x75, 0x4a,
	0xcf, 0xea, 0xfa, 0x7a, 0xea, 0x55, 0x22, 0x9b, 0x83, 0x2d, 0x72, 0x6e, 0xe2, 0x78, 0x8f, 0xe2,
	0xd2, 0x07, 0x95, 0xf1, 0xdf, 0x32, 0xeb, 0xc1, 0xa3, 0x8a, 0xec, 0x35, 0xdf, 0xb9, 0x9f, 0xc0,
	0xb0, 0xaa, 0x32, 0x00, 0x06, 0xfa, 0x6e, 0xe0, 0x58, 0x6c, 0xac, 0xed, 0x04, 0x23, 0x47, 0x07,
	0x63, 0x14, 0x05, 0xa1, 0x9e, 0xbb, 0x07, 0x76, 0x3d, 0x0a, 0xc6, 0x9b, 0xc3, 0x28, 0x72, 0x5e,
	0xc3, 0x0f, 0x75, 0x2d, 0xe9, 0x58, 0xee, 0x2f, 0x60, 0xba, 0x36, 0xf7, 0x77, 0x94, 0x7d, 0xaf,
	0x88, 0xd1, 0x8d, 0x92, 0xba, 0x6d, 0x25, 0xb9, 0x89, 0x8e, 0x57, 0x94, 0xa5, 0x3f, 0x86, 0x3e,
	0x9a, 0x51, 0x95, 0xa6, 0xeb, 0x40, 0x51, 0x11, 0xa8, 0xe1, 0x69, 0xce, 0xee, 0xf7, 0xf5, 0x36,
	0xda, 0xa6, 0xa8, 0x63, 0x54, 0x65, 0x8a, 0x95, 0xd3, 0x77, 0x5a, 0xc1, 0xfa, 0x1f, 0x16, 0x8c,
	0x9f, 0x8a, 0x38, 0xe4, 0xe7, 0x41, 0xb1, 0xe0, 0x8a, 0x6d, 0x40, 0xa7, 0xbe, 0x65, 0x74, 0xe2,
	0x88, 0xdd, 0x83, 0xa1, 0xa2, 0x1e, 0x6d, 0x60, 0xe3, 0xbb, 0xbb, 0xd5, 0x1a, 0x5a, 0x5f, 0x1d,
	0xe8, 0x3f, 0xaf, 0xa2, 0xee, 0xfe, 0xce, 0x82, 0x81, 0x19, 0x70, 0x4d, 0x3f, 0xdd, 0xff, 0x42,
	0x3f, 0xb5, 0xe3, 0x74, 0xdb, 0x8e, 0xf3, 0x76, 0x73, 0x85, 0x69, 0xc7, 0x38, 0x7d, 0x93, 0x79,
	0x1f, 0x46, 0xe1, 0x32, 0x4e, 0xa2, 0x82, 0x67, 0xeb, 0x31, 0xb0, 0x86, 0x5d, 0x01, 0x9b, 0x4d,
	0x16, 0x22, 0xc7, 0x7a, 0xd5, 0x05, 0xeb, 0xc6, 0x15, 0x4f, 0xaf, 0xb3, 0x0d, 0xe1, 0x9a, 0x2e,
	0x93, 0x52, 0x2e, 0x4d, 0x6c, 0xa8, 0xd6, 0x44, 0x98, 0xfb, 0x2b, 0x98, 0xcc, 0x45, 0xc4, 0xc3,
	0xea, 0xd5, 0x0a, 0x0b, 0x8e, 0x24, 0x5f, 0x06, 0x74, 0x36, 0x7d, 0x4f, 0x0b, 0x78, 0x34, 0x17,
	0x5c, 0x05, 0x54, 0x1c, 0xf5, 0x3d, 0x6a, 0x63, 0x3e, 0xc9, 0x0b, 0x7e, 0xc9, 0x0b, 0x5f, 0x7f,
	0x80, 0x66, 0x52, 0x07, 0x53, 0xdd, 0x73, 0x48, 0x1f, 0x57, 0x4f, 0x47, 0xbd, 0x17, 0x9f, 0x8e,
	0xbe, 0x1d, 0x34, 0x57, 0x14, 0xf9, 0x1d, 0xb6, 0xfa, 0xff, 0x00, 0x12, 0x29, 0xbe, 0xc8, 0x92,
	0x1b, 0x55, 0x9e, 0x4d, 0x1d, 0x8f, 0xb2, 0x64, 0xc5, 0x5c, 0x98, 0x84, 0x4d, 0x6e, 0xd5, 0xe9,
	0x6b, 0xe2, 0xad, 0x61, 0xec, 0x87, 0x30, 0xbe, 0x2c, 0x44, 0xea, 0xeb, 0x50, 0x42, 0x6b, 0x1a,
	0xdf, 0x7d, 0xb3, 0x6d, 0xb8, 0xb4, 0x96, 0x03, 0xfa, 0xf5, 0x00, 0xb9, 0x73, 0xa2, 0xd6, 0x5f,
	0xea, 0x08, 0x43, 0x07, 0xf8, 0xaa, 0x2f, 0xb5, 0x3f, 0xff, 0xef, 0xbc, 0x52, 0xb1, 0x8f, 0x9a,
	0x67, 0xd3, 0x09, 0xed, 0x7f, 0xb3, 0x76, 0x37, 0x0d, 0x37, 0xef, 0xa8, 0x2f, 0xbc, 0x2a, 0x4e,
	0x6f, 0x79, 0x55, 0x6c, 0x95, 0xe3, 0x1b, 0xfa, 0x6a, 0x56, 0x95, 0xe3, 0xef, 0x80, 0xdd, 0xbc,
	0x7e, 0x6c, 0x6a, 0xa3, 0xaf, 0x01, 0xac, 0x3f, 0x45, 0x96, 0xc4, 0x19, 0x97, 0x3c, 0x94, 0x74,
	0x71, 0x9a, 0x7a, 0x2d, 0x04, 0x4b, 0xec, 0x38, 0x4a, 0x74, 0xef, 0x96, 0x2e, 0xb1, 0x2b, 0x99,
	0xdd, 0x03, 0x26, 0x55, 0x21, 0xb2, 0x85, 0xdf, 0x32, 0x0c, 0x7d, 0x65, 0xaa, 0x6c, 0x6a, 0x4b,
	0x13, 0x5a, 0x85, 0x5a, 0x6d, 0xc4, 0xdb, 0x2f, 0x18, 0xf1, 0xee, 0xcf, 0xa1, 0xaf, 0xed, 0xb7,
	0x7a, 0xe1, 0xb4, 0x6e, 0x79, 0xe1, 0xec, 0xdc, 0xf2, 0xc2, 0xd9, 0xbd, 0xf5, 0x85, 0xb3, 0xd7,
	0x7e, 0xe1, 0x74, 0xaf, 0x60, 0x7a, 0x56, 0x2e, 0x16, 0x5c, 0x2a, 0xf3, 0x06, 0xf6, 0xf2, 0x97,
	0x6b, 0x2c, 0xca, 0xcd, 0x73, 0x44, 0x90, 0x68, 0x27, 0xf1, 0x5a, 0x08, 0x1e, 0x6f, 0x5e, 0xca,
	0xa5, 0xaf, 0x84, 0xaf, 0x82, 0xe4, 0xca, 0xbc, 0x7b, 0x01, 0x62, 0xe7, 0xe2, 0x3c, 0x48, 0xae,
	0xdc, 0x6f, 0x2c, 0x18, 0x7b, 0xfc, 0xeb, 0x92, 0x4b, 0x75, 0x3f, 0x11, 0x17, 0x78, 0xf1, 0x35,
	0x1e, 0xe8, 0x57, 0x37, 0x68, 0x1d, 0x24, 0x37, 0x0c, 0x7c, 0x6e, 0x2e, 0xd2, 0x2d, 0x62, 0x75,
	0x01, 0xee, 0xac, 0x11, 0xe7, 0xe6, 0x1e, 0xfc, 0x19, 0x6c, 0x57, 0xc1, 0xac, 0xfd, 0xa8, 0xa3,
	0x2f, 0x2a, 0xcc, 0x74, 0x3d, 0x68, 0x7a, 0xee, 0x77, 0x8e, 0xac, 0x7f, 0x07, 0x00, 0x00, 0xff,
	0xff, 0xf1, 0x25, 0x90, 0x7a, 0xd6, 0x17, 0x00, 0x00,
}
